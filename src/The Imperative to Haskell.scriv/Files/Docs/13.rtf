{\rtf1\ansi\ansicpg1252\cocoartf1187\cocoasubrtf370
{\fonttbl\f0\fnil\fcharset0 Verdana;}
{\colortbl;\red255\green255\blue255;}
\pard\tx720\tx1440\tx2160\fi360\sl288\slmult1\pardirnatural

\f0\fs28 \cf0 Haskell is perceived as hard to learn:\
 - Because it is huge, compared to imperative.\
(Example toms diagram)\
- However all this stuff is not necessary.\
	- Bring the Joe to an equivalent level already\
	- Erlang with minimal FP can achieve lots already.\
		-Summarize Joes book\
	=> Keep a smaller and simple set\
\
- The imperative practice is 10 % syntax check compiler, 90 % debug, to get a runningprogram. Then you have \'ab\'a0correctness\'a0\'bb, ie what was the intend\
\
- The FP practice (with haskell , ie type inference) , is 90% compiler fight, 10% correctnesss. The \'ab\'a0debug\'a0\'bb only comes with a new class of problem (lazyness, space, = performance) which are not occurring unless using advanced concepts.\
\
	- This look nice on paper, however many never went over the \'ab\'a0compiler phase\'a0\'bb\
	-> Learn to understand what the compiler says\
		->Good Practice for \'ab\'a0debugging\'a0\'bb the typing messages.\
-> Example : IO/ -> Monad talks\
\
=> Show the Practice is different\
\
\
\
}