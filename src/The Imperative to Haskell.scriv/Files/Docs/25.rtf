{\rtf1\ansi\ansicpg1252\cocoartf1187\cocoasubrtf370
{\fonttbl\f0\fnil\fcharset0 Verdana;}
{\colortbl;\red255\green255\blue255;}
\pard\tx720\tx1440\tx2160\fi360\sl288\slmult1\pardirnatural

\f0\fs28 \cf0  Part1 introduces the syntax and programming styles. We start with How, We use a series of \'ab\'a0how can i do this in haskell\'a0\'bb, based on the way we were taught imperative programming. I cover in order: structured programming, OO concepts, agile and build environment.\
The scope is basic haskell and covers the notions known in the imperative world.\
Part 2  uses this knowledge and build iteratively a real world example of an accounting program, (inspired by hledger) where we discuss and comment practices, and caveat. We use and introduce some common libraries.\
Part 3 introduces \'ab\'a0intermediate haskell\'a0\'bb, i.e. Concepts that do not exists in imperative world.\
We revisit our accounting program to use these new concepts.\
The fourth part, or annex, is a cultural part. It present a Jargon file of the concepts we saw previously, useful to understand Q&A on stackexchange for instance, including a series of \'ab\'a0programming styles\'a0\'bb useful when reading Haskell code in libraries, then point at advanced Haskell concepts, just so you know they exists, and are \'ab\'a0advanced\'a0\'bb (and that you could live well without)}