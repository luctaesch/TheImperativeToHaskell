{\rtf1\ansi\ansicpg1252\cocoartf1187\cocoasubrtf370
{\fonttbl\f0\fnil\fcharset0 Verdana;\f1\fmodern\fcharset0 Courier;\f2\froman\fcharset0 Times-Roman;
}
{\colortbl;\red255\green255\blue255;}
\pard\tx720\tx1440\tx2160\fi360\sl288\slmult1\pardirnatural

\f0\b\fs28 \cf0 Yes
\b0 .\
\
in C : \
int f(int x, int y) \{\
    return x*x + y*y;\
\}\
\
in Haskell : \
f x y = x*x + y*y\
\
\
\
\

\b However
\b0 , \
there are two categories:  
\b functions
\b0  and 
\b actions
\b0 .\
\
f x = ((g (x ))*(h (x) ))/ 2\
we do not care if the compiler evaluates g or h first, as long it comes with a good result. this is a 
\b function
\b0 . a function always gives the same result (given the same parameters).\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural
\cf0 now consider 
\f1 getChar 
\f0 that reads a character from StdIn.\
it will NOT give the same result at every call, as it depends on what is comes in from StdIn. this is an 
\b action
\b0 . Note that the sequence matters for actions,  like opening a file 
\i first
\i0 , (do something with it), 
\i then
\i0  close the file. we 
\i do
\i0  care about the sequence for actions.\
\

\f1\fs24 the syntax to specify the sequence is do \{actions1; actions2..\}\
\
\pard\tx720\tx1440\tx2160\fi360\sl288\slmult1\pardirnatural

\fs26 \cf0   copyCharUnlessNL\'a0\'a0=\'a0\'a0do\'a0\{ c\'a0<-\'a0getChar ; \
			    if ( c=='/n')\
  			       then \{ putChar ''\}			       else \{ putChar c\}\
		        \} \
// copy a char from stdio to stdout, unless is is a NewLine\
\
\
\pard\pardeftab720\sa320

\f2\fs32 \cf0 The keyword 
\f1\fs26 do
\f2\fs32  introduces a sequence of statements which are executed in order. A statement is either an action, or the assignment  of the result of an action using 
\f1\fs26 <-
\f2\fs32 .
\f1\fs26  				
\f0\fs28 \
we will come back to this distinction, as this is central to haskell and is a point where many could fails \
\pard\tx720\tx1440\tx2160\fi360\sl288\slmult1\pardirnatural
\cf0 \
\
}